;; Church numerals 

;; lambda (x) takes one argument and produces it 
;; lambda (f) takes one argument, the result of lambda (x) 

;; zero is a function of one arg, that returns a function of one arg 
;; that returns the argument (identity function), so ((zero f) x) is just x

;; x -> identity function 
(define zero (lambda (f) (lambda (x) x)))  ;-> identity 
; (define zero (lambda (f) identity))
(zero 1) ;-> identity 
((zero number->string) 1) ;-> (identity 1) -> 1 
((zero add1) 1) ;-> (identity 1) -> 1

;; Function -> Function 
(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))

;; Function -> Function 
(define one (lambda (f) (lambda (x) (f x))))
;one, (add-1 zero):
;; (lambda (f) (lambda (x) (f ((zero f) x))))
;; (lambda (f) (lambda (x) (f (((lambda (f) (lambda (x) x)) f) x))))
;; (lambda (f) (lambda (x) (f x)))
(one 1) 
((one number->string) 1) ;-> "1"

;; Function -> Function 
(define two (lambda (f) (lambda (x) (f (f x)))))
;two, (add-1 one):
;; (lambda (f) (lambda (x) (f ((one f) x))))
;; (lambda (f) (lambda (x) (f (((lambda (f) (lambda (x) (f x))) f) x))))
;; (lambda (f) (lambda (x) (f (f x))))
(two 1)
((two add1) 1) ;-> 3

;; Function -> Function 
(define three (lambda (f) (lambda (x) (f (f (f x))))))
;; three, (add-1 two):
;; (lambda (f) (lambda (x) (f ((two f) x)))) 
;; (lambda (f) (lambda (x) (f (((lambda (f) (lambda (x) (f (f x)))) f) x))))
;; (lambda (f) (lambda (x) (f (f (f x)))))
(three 1) 
((three add1) 1) ;-> 4

;; =============================================================================
;; Function -> Function
;; given two church numerals, combine them  
(check-expect (((add zero one) add1) 1) 2)
(check-expect (((add one one) add1) 1) 3)
(check-expect (((add one two) add1) 1) 4)

(define (add a b) 
  (lambda (f)                 
    (lambda (x)          
      ((a f) ((b f) x)))))
